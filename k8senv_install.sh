#!/bin/bash

# Shell Script Project Installer
# This script installs shell scripts to ~/.local/lib/<project> and creates initialization

set -e  # Exit on error

# Configuration
LIB_BASE_DIR="$HOME/.local/lib"
BIN_DIR="$HOME/.local/bin"
INIT_SCRIPT_NAME="init.sh"
PROJECT_NAME=k8senv

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}


# Find shell scripts in current directory
find_shell_scripts() {
    # Find .sh files and files with shell shebangs
    SCRIPTS=($(find src -maxdepth 1 -type f  -name "*.sh"  | sort))
    
    if [ ${#SCRIPTS[@]} -eq 0 ]; then
        log_error "No shell scripts found in the src directory"
        exit 1
    fi
    
    log_info "Found ${#SCRIPTS[@]} shell scripts:"
}

# Get list of commands to alias
get_aliases() {
    echo
    log_info "Setting up command aliases..."
    echo "Enter commands (such as kubectl, or helm you wish to auto create kubeconfig for):"
    echo "Enter one per line, blank line to finish:"
    echo
    
    ALIASES=()
    while true; do
        read -p "> " aliascmd
        if [ -z "$aliascmd" ]; then
            break
        fi
        
        if ! type $aliascmd > /dev/null; then 
            log_warn "Command '$aliascmd' not found on the path"
            continue
        fi
        
        ALIASES+=("$aliascmd")
        log_info "Added alias: $aliascmd"
    done
    
    if [ ${#ALIASES[@]} -eq 0 ]; then
        log_warn "No aliases configured"
    fi
}

# Get config file creation command
get_config_command() {
    echo
    log_info "GETKUBE setup"
    echo "Please enter the command which unlocks your kubeconfig"
    echo " -this command should take a single parameter to reference which cluster (if you have more than one)"
    echo " you are accessing, and output the kubconfig to stdout "
    echo 
    
    read -p "Enter command to create/initialize config file: " CONFIG_CMD
    
    if [ -z "$CONFIG_CMD" ]; then
        log_info "No config command specified"
	exit 1
    fi
}

# Create library and bin directories
create_directories() {
    LIB_DIR="$LIB_BASE_DIR/$PROJECT_NAME"
    
    log_info "Creating library directory: $LIB_DIR"
    
    if [ -d "$LIB_DIR" ]; then
        read -p "Directory $LIB_DIR already exists. Remove it? (y/N): " confirm
        if [[ "$confirm" =~ ^[Yy]$ ]]; then
            rm -rf "$LIB_DIR"
            log_info "Removed existing directory"
        else
            log_error "Installation cancelled"
            exit 1
        fi
    fi
    
    mkdir -p "$LIB_DIR"
    mkdir -p "$BIN_DIR"
    log_success "Created directories"
    
    # Check if bin directory is in PATH
    if [[ ":$PATH:" != *":$BIN_DIR:"* ]]; then
        log_warn "Directory $BIN_DIR is not in your PATH"
        echo "You may need to add it to your shell profile:"
        echo "  export PATH=\"$BIN_DIR:\$PATH\""
    fi
}

# Copy scripts to library directory
copy_scripts() {
    log_info "Copying scripts to $LIB_DIR..."
    
    for script in "${SCRIPTS[@]}"; do
        cp "$script" "$LIB_DIR/"
        chmod +x "$LIB_DIR/$(basename "$script")"
        log_info "Copied: $script"
    done
    
    log_success "All scripts copied successfully"
}

# Create initialization script
create_init_script() {
    INIT_SCRIPT="$BIN_DIR/${PROJECT_NAME}-init"
    
    log_info "Creating initialization script: $INIT_SCRIPT"
    
    cat > "$INIT_SCRIPT" << EOF
#!/bin/bash
# ${PROJECT_NAME} initialization script
# Generated by installer on $(date)

# Set library directory environment variable
export ${PROJECT_NAME^^}_LIB_DIR="$LIB_DIR"
export GETKUBE="$CONFIG_CMD"

. $LIB_DIR/init-env.sh

EOF

    # Add aliases if any were configured
    if [ ${#ALIASES[@]} -gt 0 ]; then
        echo "# Command aliases" >> "$INIT_SCRIPT"
        for alias_name in "${ALIASES[@]}"; do
            echo "alias $alias_name='k8senv_cmd $alias_name'" >> "$INIT_SCRIPT"
        done
    fi
    
    chmod +x "$INIT_SCRIPT"
    log_success "Created initialization script"
}

# Offer to add to shell profile
add_to_profile() {
    echo
    log_info "Shell profile integration"
    echo "To automatically load $PROJECT_NAME on shell startup, add this line to your shell profile:"
    echo
    echo -e "${GREEN}source $INIT_SCRIPT${NC}"
    echo
    
    # Detect common shell profiles
    PROFILES=()
    [ -f "$HOME/.bashrc" ] && PROFILES+=("$HOME/.bashrc")
    [ -f "$HOME/.zshrc" ] && PROFILES+=("$HOME/.zshrc")
    [ -f "$HOME/.profile" ] && PROFILES+=("$HOME/.profile")
    
    if [ ${#PROFILES[@]} -gt 0 ]; then
        echo "Detected shell profiles:"
        for i in "${!PROFILES[@]}"; do
            echo "  $((i+1)). ${PROFILES[$i]}"
        done
        echo "  0. Skip automatic addition"
        echo
        
        read -p "Add to which profile? (0-${#PROFILES[@]}): " choice
        
        if [[ "$choice" =~ ^[1-9][0-9]*$ ]] && [ "$choice" -le "${#PROFILES[@]}" ]; then
            profile="${PROFILES[$((choice-1))]}"
            echo >> "$profile"
            echo "# $PROJECT_NAME initialization" >> "$profile"
            echo "source $INIT_SCRIPT" >> "$profile"
            log_success "Added to $profile"
            echo
            log_info "Restart your shell or run: source $profile"
        else
            log_info "Skipping automatic profile addition"
        fi
    fi
}

# Create uninstall script
create_uninstall() {
    UNINSTALL_SCRIPT="$BIN_DIR/${PROJECT_NAME}-uninstall"
    
    log_info "Creating uninstall script: $UNINSTALL_SCRIPT"
    
    cat > "$UNINSTALL_SCRIPT" << EOF
#!/bin/bash
# ${PROJECT_NAME} uninstall script

echo "Uninstalling $PROJECT_NAME..."
echo "This will remove:"
echo "  - Library directory: $LIB_DIR"
echo "  - Init script: $BIN_DIR/${PROJECT_NAME}-init"
echo "  - This uninstall script: $BIN_DIR/${PROJECT_NAME}-uninstall"
echo
read -p "Are you sure? (y/N): " confirm

if [[ "\$confirm" =~ ^[Yy]$ ]]; then
    rm -rf "$LIB_DIR"
    rm -f "$BIN_DIR/${PROJECT_NAME}-init"
    echo "Uninstalled successfully"
    echo "Note: You may need to manually remove the source line from your shell profile"
    echo "Removing uninstall script..."
    rm -f "$BIN_DIR/${PROJECT_NAME}-uninstall"
else
    echo "Uninstall cancelled"
fi
EOF
    
    chmod +x "$UNINSTALL_SCRIPT"
    log_success "Created uninstall script"
}

# Display summary
show_summary() {
    echo
    echo "=============================================="
    log_success "Installation completed successfully!"
    echo "=============================================="
    echo
    echo "Project: $PROJECT_NAME"
    echo "Library directory: $LIB_DIR"
    echo "Bin directory: $BIN_DIR"
    echo "Environment variable: ${PROJECT_NAME^^}_LIB_DIR"
    echo "Initialization script: $INIT_SCRIPT"
    echo "Uninstall script: $UNINSTALL_SCRIPT"
    echo
    echo "Scripts installed:"
    for script in "${SCRIPTS[@]}"; do
        echo "  - $(basename "$script")"
    done
    echo
    if [ ${#ALIASES[@]} -gt 0 ]; then
        echo "K8S commands configured to autogen KUBECONFIG"
        for alias_def in "${ALIASES[@]}"; do
            alias_name=$(echo "$alias_def" | cut -d: -f1)
            script_name=$(echo "$alias_def" | cut -d: -f2)
            echo "  - $alias_name"
        done
        echo
    fi
    echo "To start using $PROJECT_NAME, run:"
    echo "  source ${PROJECT_NAME}-init"
    echo
    echo "To uninstall later, run:"
    echo "  ${PROJECT_NAME}-uninstall"
    echo
}

# Main installation flow
main() {
    echo "=============================================="
    echo "       Shell Script Project Installer"
    echo "=============================================="
    
    find_shell_scripts
    get_aliases
    get_config_command
    create_directories
    copy_scripts
    create_init_script
    create_uninstall
    add_to_profile
    show_summary
}

# Run main function
main "$@"
